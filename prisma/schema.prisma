generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider     = "mysql"
  url          = env("DATABASE_URL")
  relationMode = "prisma"
}


model Profile {
  id              String          @id @default(uuid())
  username        String          @unique
  hashedPassword  String
  name            String
  imageUrl        String?         @db.Text
  email           String?         @db.Text
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
  directInitiator Direct[]        @relation("ProfileOne")
  directReceiver  Direct[]        @relation("ProfileTwo")
  directMessages  DirectMessage[]
  servers         Server[]
  members         Member[]
  channels        Channel[]
}

model Server {
  id         String    @id @default(uuid())
  name       String
  imageUrl   String    @db.Text
  inviteCode String    @unique
  profileId  String
  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
  members    Member[]
  channels   Channel[]
  profile    Profile   @relation(fields: [profileId], references: [id], onDelete: Cascade)

  @@index([profileId])
}

model Member {
  id        String     @id @default(uuid())
  role      MemberRole @default(GUEST)
  profileId String
  serverId  String
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  profile   Profile    @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server     @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([serverId])
  @@index([profileId])
}

model Channel {
  id        String      @id @default(uuid())
  name      String
  type      ChannelType @default(TEXT)
  profileId String
  serverId  String
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  profile   Profile     @relation(fields: [profileId], references: [id], onDelete: Cascade)
  server    Server      @relation(fields: [serverId], references: [id], onDelete: Cascade)
  messages  Message[]

  @@index([profileId])
  @@index([serverId])
}

model Message {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  memberId  String
  channelId String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  member    Member   @relation(fields: [memberId], references: [id], onDelete: Cascade)
  channel   Channel  @relation(fields: [channelId], references: [id], onDelete: Cascade)

  @@index([channelId])
  @@index([memberId])
}

model Direct {
  id             String          @id @default(uuid())
  profileOneId   String
  profileTwoId   String
  profileOne     Profile         @relation("ProfileOne", fields: [profileOneId], references: [id], onDelete: Cascade)
  profileTwo     Profile         @relation("ProfileTwo", fields: [profileTwoId], references: [id], onDelete: Cascade)
  directMessages DirectMessage[]

  @@unique([profileOneId, profileTwoId])
  @@index([profileTwoId])
}

model DirectMessage {
  id        String   @id @default(uuid())
  content   String   @db.Text
  fileUrl   String?  @db.Text
  profileId String
  directId  String
  deleted   Boolean  @default(false)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  profile   Profile  @relation(fields: [profileId], references: [id], onDelete: Cascade)
  direct    Direct   @relation(fields: [directId], references: [id], onDelete: Cascade)

  @@index([profileId])
  @@index([directId])
}

enum MemberRole {
  ADMIN
  MODERATOR
  GUEST
}

enum ChannelType {
  TEXT
  AUDIO
  VIDEO
}


